1]
a)discount calculator

print('------Discount Calculator-----')
 mrp = int(input('Enter MRP of product : ')) 
discount = int(input('Enter discount of product : '))
 cost = mrp - (discount/100)*mrp
 print('     have to pay ',cost)

b)Basic math operations

a = int(input('Enter value of a : '))
 b = int(input('Enter value of b : '))
 c = 0
 c = a + b 
print(a,'+',b,'=',c)
 c = a - b 
print(a,'-',b,'=',c)
 c = a * b 
print(a,'*',b,'=',c)
 c = a / b 
print(a,'/',b,'=',c)
 c = a % b 
print(a,'%',b,'=',c)
 a = int(input('\nEnter value of a : '))
 b = int(input('Enter value of b : ')) 
c = a**b
print(a,'**',b,'=',c)
 a = int(input('\nEnter value of a : '))
 b = int(input('Enter value of b : ')) 
c = a//b
 print(a,'//',b,'=',c)


2]
a)No. of even or odd

num = input("Enter numbers : ").split() 
even=odd=0
 for i in num:
 if int(i)%2 == 0: 
even+=1
 else:
 odd+=1
 print('Number of even numbers is ',even) 
print('Number of odd numbers is ',odd)

b)temp converter

temp = input('Enter Temp : ')
 degree = int(temp[:-1]) 
typ = temp[-1]
 if typ.upper()=='C':
 temp1 = round(degree*9/5)+32 
result='F'
 elif typ.upper()=='F':
 temp1 = round((degree-32)/9*5) 
result='C'
 else:
 print('Invalid input.') 
quit()
 print('Converted temp is ',temp1,result)

3]
a)Marks Calculation

print("Enter the Marks of 6 Subjects")
Subject1 = int(input(" "))
Subject2 = int(input(" "))
Subject3 = int(input(" "))
Subject4 = int(input(" "))
Subject5 = int(input(" "))
Subject6 = int(input(" "))

Total = Subject1 + Subject2 + Subject3 + Subject4 + Subject5 + Subject6
Average = Total/6.0
Percentage = (Total/600)*100

print ("Total Marks Scored are " ,Total)
print("Average of Your Marks is " ,Average)
print("Percentage Scored is " ,Percentage)
if Percentage >= 90:
    print("Grade A")
elif 90 < Percentage >= 80:
    print("Grade B")
elif 80 < Percentage >= 70:
    print("Grade C")
elif 70 < Percentage >= 60:
    print("Grade D")
elif 60 < Percentage >= 50:
    print("Grade E")
else :
    print("Grade F")

b)Factorial

def factorial(number):
  if number == 0:
    return 1
  else:
    return number * factorial(number - 1)

number = int(input("Enter a number: "))
print(factorial(number))
print("Factorial of", number, "is", factorial(number))



4]
a)to print the numbers of a specified list after removing even numbers from it.
print(('List').center(50,'-'))
 list1 = ['physics', 'chemistry', 1997, 2000]
 list2 = [1, 2, 3, 4, 5, 6, 7 ]
 print("\n Accessing list") 
print("\n list1[0]: ", list1[0])
 print("\n list2[1:5]: ", list2[1:5])
 print("\n list2[-2]",list2[-2])
 list = ['physics', 'chemistry', 1997, 2000]
 print("\n updating list")
 print("\n Value available at index 2 : ")
 print(list[2])
 list[2] = 2001
 print("\n New value available at index 2 : ")
 print(list[2])
 list1 = ['physics', 'chemistry', 1997, 2000]
 print("\n Deleting list element") 
print(list1)
 del list1[2]
print("\n After deleting value at index 2 : ")
 print(list1)
 print("\n Basic List Operations") 
print("\n Length of List [1,2,3] is ")
 print(len([1, 2, 3]))
 print("\n Concatenation of two lists")
 print([1, 2, 3] + [4, 5, 6])
 print("\n Repetition of String")
 print(['Hello!'] * 4)
 print("\n Membership ")
 print(3 in [1, 2, 3]) 
print("\n Iterations ") 
for x in [1, 2, 3]:
 print(x)
 print(('Tuple').center(50,'-'))
 print("\nAccessing Tuple values")
 tup1 = ('physics', 'chemistry', 1997, 2000)
 tup2 = (1, 2, 3, 4, 5, 6, 7 )
 print("tup1[0]: ", tup1[0])
 print("tup2[1:5]: ", tup2[1:5])
print("\nUpdating Tuple values")
 tup1 = (12, 34.56)
 tup2 = ('abc', 'xyz')
 tup3 = tup1 + tup2;
 print(tup3)
 print("\nDeleting tuple")
 tup = ('physics', 'chemistry', 1997, 2000);
 print(tup)
 del tup
 print("After deleting tup : ")
 #print(tup)
 Error
 print("\n Basic Tuple Operations")
 print("length of tuple (1,2,3):- ")
 print(len((1, 2, 3)))
 print("Concatenate two tuples (1,2,3) and (4,5,6):-")
 print((1, 2, 3) + (4, 5, 6))
 print("Repetation of tuple Hi")
 print(('Hi!',) * 4)
 print("Membership of 3 in tuple (1,2,3)")
 print(3 in (1, 2, 3))
 print("Membership of 4 in tuple (1,2,3)")
print(4 in (1, 2, 3))
 print("Iteration") 
for x in (1, 2, 3):
 print(x)
 L = ('spam', 'Spam', 'SPAM!')
 print("L[-2]:-")
 print(L[-2])
 print("\n Built-in Tuple Functions")
 print("\n Length of Tuple")
 tuple1, tuple2 = (123, 'xyz', 'zara'), (456, 'abc')
 print("First tuple length : ", len(tuple1)) 
print("Second tuple length : ", len(tuple2))
 print("\n Maximum and Minimum element from Tuple")
 tuple1, tuple2 = ('z', 'xyz', 'zara', 'abc'), (456, 700, 200) 
print("Min value element : ", min(tuple1))
 print("Min value element : ", min(tuple2)) 
print("Max value element : ", max(tuple1))
 print("Max value element : ", max(tuple2))
 print(('Dictionary').center(50,'-'))
print("\n Accessing Dictionary element")
 dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
 print("dict['Name']: ", dict['Name'])
 print("dict['Age']: ", dict['Age'])
 print("\n Updating Dictionary")
 dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
 dict['Age'] = 8
 dict['School'] = "DPS School" 
print("dict['Age']: ", dict['Age'])
 print("dict['School']: ", dict['School'])
 print("\n Deleting from Dictionary")
 dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
 del dict['Name']
 dict.clear()
 del dict
 dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
 dict['School'] = "DPS School" 
print("dict['Age']: ", dict['Age'])
 print("dict['School']: ", dict['School'])
dict = {'Name': 'Zara', 'Age': 7, 'Name': 'Manni'}
 print("dict['Name']: ", dict['Name'])
 dict = {'Name': 'Zara', 'Age': 7}
 print("dict['Name']: ", dict['Name'])


b)to check whether an element exists within a tuple
l = input('Enter elements of list : ')
 l = l.split()
 print('List is : ',l)
 for i in l:
 if int(i)%2 == 0:
 l.remove(i)
 print('New list : ',l)
 l = tuple(input('Enter elements of tuple : '))
 x = input('Enter element to search : ')
 if x in l:
 print('Element ',x,' is present')
 else:
 print('Element ',x,' is not present')
 d1 = {1:10,2:20}
 d2 = {3:30,4:40}
 d3 = {5:50,6:60}
 result = {} 
result.update(d1) 
result.update(d2)
result.update(d3)
 ##result = {}
 ##for d in (d1,d2,d3):
 ## result.update(d)
 print(d1) 
print(d2) 
print(d3) 
print(result)


5]
a)Program to concatenate dictionaries:
python
 
dict1 = {1: 10, 2: 20}
dict2 = {3: 30, 4: 40}
dict3 = {5: 50, 6: 60}
result = {**dict1, **dict2, **dict3}
print("Concatenated dictionary:", result)

b)Program to check whether an element exists within a list:
python
 
my_list = [1, 2, 3, 4, 5]
element = int(input("Enter an element to check: "))
if element in my_list:
 print("Element exists in the list.")
else:
 print("Element does not exist in the list.")



6]
a)To check Even or Odd

num = int(input("Enter the Number:"))
if num % 2 == 0:
    print("Entered Number is Even")
else:
    print("Entered Number is Odd")

b)Prime/Not Prime

def is_prime(n):
 if n <= 1:
 return False
 for i in range(2, int(n**0.5) + 1):
 if n % i == 0:
 return False
 return True


7] Calculator

Num1 = int(input("Enter the 1st Number: "))
Num2 = int(input("Enter the 2nd Number: "))
choice = int(input("Enter your Choice \n1 Addition\n2 Subtraction\n3 Multiplication\n4 Division\n5 Modulus \n "))

if choice == 1:
    result = Num1 + Num2
    print("Addition of Two Numbers is:", result)
elif choice == 2:
    result = Num1 - Num2
    print("Subtraction of Two Numbers is:", result)
elif choice == 3:
    result = Num1 * Num2
    print("Multiplication of Two Numbers is:", result)
elif choice == 4:
    if Num2 != 0:
        result = Num1 / Num2
        print("Division of Two Numbers is:", result)
    else:
        print("Cannot divide by zero!")
elif choice == 5:
    result = Num1 % Num2
    print("Remainder of the Two Numbers is:", result)
else:
    print("Invalid choice! Please enter a number between 1 and 5.")


8]Multiple Inheritance

class Person:
 def adhaar(self): 
n=int(input("Adhaar no. : "))
 print("Adhaar no. = ",n)
 class Student(Person):
 def moodleId(self):
 n=int(input("Moodle ID : "))
 print("Moodle ID = ",n)
 class Employee(Person):
 def empId(self):
 n=int(input("Employee ID : "))
 print("Employee ID = ",n)
 class Researcher(Student,Employee):
 def restopic(self):
 n=input("Research Topic : ")
 print("Research Topic = ",n)
 r=Researcher()
 r.restopic() 
r.empId() 
r.moodleId() 
r.adhaar()
 e=Employee()
 e.empId() 
e.adhaar()
 s=Student() 
s.moodleId() 
s.adhaar()


9]Method Overriding

class Shape:
 def draw(self): 
n=input("Enter name :")
 print("Enter name = ",n)
 class Line(Shape):
 def draw(self):
 x1=input("Enter the co-ordinates of X1:")
 x2=input("Enter the co-ordinates of X2:")
 y1=input("Enter the co-ordinates of Y1:")
 Department of Information Technology | APSIT
y2=input("Enter the co-ordinates of Y2:")
 print("X1 = ",x1)
 print("X2 = ",x2)
 print("Y1 = ",y1)
 print("Y2 = ",y2)
 class Triangle(Shape):
 def draw(self):
 h=int(input("Enter Triangle height :"))
 b=int(input("Enter Triangle base : "))
 print("Area = ",0.5*h*b)
 class Rectangle(Shape):
 def draw(self):
 l=int(input("Enter Rect. length :")) 
b=int(input("Enter Rect. breadth : "))
 print("Area = ",l*b)
 class Circle(Shape):
 def draw(self):
r=int(input("Enter the Radius :"))
 print("Area = ",3.14*r*r)
 s=Shape() 
l=Line() 
t=Triangle() 
r=Rectangle()
 c=Circle() 
s.draw()
 l.draw()
 t.draw()
 r.draw()
 c.draw()



10]Area using abstract class
Program to calculate the area of Circle, Square, and Rectangle using abstract class:
python
 
from abc import ABC, abstractmethod

class Shape(ABC):
 @abstractmethod
 def area(self):
 pass

class Circle(Shape):
 def __init__(self, radius):
 self.radius = radius
 
 def area(self):
 return 3.14 * self.radius * self.radius

class Square(Shape):
 def __init__(self, side):
 self.side = side
 
 def area(self):
 return self.side * self.side

class Rectangle(Shape):
 def __init__(self, length, width):
 self.length = length
 self.width = width
 
 def area(self):
 return self.length * self.width

# Example usage
circle = Circle(5)
print("Area of circle:", circle.area())

square = Square(4)
print("Area of square:", square.area())

rectangle = Rectangle(4, 5)
print("Area of rectangle:", rectangle.area())

11]Area using interface
Program to calculate the area of Circle, Square, and Rectangle using interface:
python
 
from abc import ABC, abstractmethod

class Shape(ABC):
 @abstractmethod
 def area(self):
 pass

class Circle(Shape):
 def __init__(self, radius):
 self.radius = radius
 
 def area(self):
 return 3.14 * self.radius * self.radius

class Square(Shape):
 def __init__(self, side):
 self.side = side
 
 def area(self):
 return self.side * self.side

class Rectangle(Shape):
 def __init__(self, length, width):
 self.length = length
 self.width = width
 
 def area(self):
 return self.length * self.width

# Example usage
circle = Circle(5)
print("Area of circle:", circle.area())

square = Square(4)
print("Area of square:", square.area())

rectangle = Rectangle(4, 5)
print("Area of rectangle:", rectangle.area())



12]Menu for built-in exceptions

class Error(Exception):
 """Base class for other exceptions"""
 pass
 class ValueTooSmallError(Error):
 """Raised when the input value is too small"""
 pass
 class ValueTooLargeError(Error):
 """Raised when the input value is too large"""
 pass
 # you need to guess this number
 number = 10
 # user guesses a number until he/she gets it right
 while True:
 try:
 i_num = int(input("Enter a number: "))
 if i_num < number:
 raise ValueTooSmallError
 elif i_num > number:
 raise ValueTooLargeError
 break
 except ValueTooSmallError:
 print("This value is too small, try again!")
 print()
 except ValueTooLargeError:
 print("This value is too large, try again!")
 print()
 print("Congratulations! You guessed it correctly.")




13]create and import user-defined packages

Step 1: Save below program as cal.py

Cal.py

def add(x,y)
 z=x+y
 print('Sum of two numbers:',z)
 def sub(x,y):
 z=x-y
 print('Subtraction of two numbers:',z)
 def div(x,y):
 z=x/y
 print('Division of two numbers:',z)
 def mul(x,y):
 z=x*y
 print('Multiplication of two numbers:',z)
def mod(x,y):
 z=x%y
 print('Modulus of two numbers:',z)

 Step 2: Save Below Program as Arithmatic.py

Arithmatic.py

from arith import *
 a,b=int(input("Enter two numbers"))
 ch=int(input('Enter choice \n 1. Add \n 2. Sub \n 3. Mul \n 4. 
Div \n 5. Mod'))
 if ch==1:
 add(a,b)
 elif ch==2
 sub(a,b)
 elif ch==3
 mul(a,b)
 elif ch==4
 div(a,b)
 elif ch==5
 mod(a,b)
 else
 print('Wrong Choice')


14]File Handling

Studentpickle.py

 class student:
 def __init__(self,roll,name,age):
 self.roll=roll
 self.name=name
 self.age=age
 def display(self):
 print(self.roll,self.name,self.age)

 Experiment9.py

 import pickle,studentpickle
 print("******CREATING PICKLE******")
 f=open("studentpickle.dat","wb")
 n=int(input("How many students??"))
 for i in range(n):
 roll=int(input("Enter your roll no:"))
 name=input("Enter your name:")
 age=int(input("Enter your age:"))
 s=studentpickle.student(roll,name,age)
 pickle.dump(s,f)
 f.close()
 print("******LOADING PICKLE*******")
 f=open('studentpickle.dat','rb')
 for i in range(n):
s1=pickle.load(f)
 print("Roll no:",s1.roll)
 print("Name:",s1.name)
 print("Age:",s1.age)
 f.close()


15]GUI using Tkinter

from tkinter import *
 top = Tk()
 top.title("SE-IT 17104074")
 c = Canvas(top,bg="blue",height=1000,width=1000)
 fnt = ('Times','22','bold italic underline')
 text = c.create_text(250,40,text="My First Tkinter Application on 
canvas",font=fnt,fill="red",activefill="cyan3")
 line = c.create_line(80,80,200,80,200,200,width=6,fill="cyan3") line = 
c.create_line(80,80,300,80,300,300,width=6,fill="cyan3") oval =
 c.create_oval(120,120,400,300,width=6,fill="red",outline="green",activefill="cyan 3")
 poly = c.create_polygon(320,320,320,420,420,320,width=6,fill="yellow",outline="green", 
activefill="cyan3")
 rect = c.create_rectangle(360,460,550,550,width=6,fill="green",outline="green",activefill
 ="cyan3")
 arc = c.create_arc(500,100,600,300,start=0,extent=180,width=6,outline="green",style=" arc")
 file1=PhotoImage(file="python.png",height=300,width=300) 
file2=PhotoImage(file="Java.png",height=300,width=300) 
id=c.create_image(300,400,anchor=NE,image=file1,activeimage=file2)
 c.pack() 
top.mainloop()


16]CRUD ops using sqlite

import sqlite3  
conn = sqlite3.connect('example.db')  
print ("Opened database successfully");
 conn.execute('''CREATE TABLE EMPLOYEE11 (FIRST_NAME CHAR(20) NOT 
NULL, LAST_NAME CHAR(20), AGE INT,SEX CHAR(1),INCOME FLOAT )''')  
print ("Table created successfully");  
conn.execute("INSERT INTO EMPLOYEE11(FIRST_NAME,LAST_NAME, AGE, SEX,
 INCOME)VALUES ('RAJESH','GANGULY',28,'M',93776)");  
conn.execute("INSERT INTO EMPLOYEE11(FIRST_NAME,LAST_NAME, AGE, SEX,
 INCOME) VALUES ('SACHIN','TENDULKAR',40,'M',98463)");  
conn.execute("INSERT INTO EMPLOYEE11(FIRST_NAME,LAST_NAME, AGE, SEX,
 INCOME)VALUES ('ANIL','KUMBLE',42,'M',64300)");  
conn.execute("INSERT INTO EMPLOYEE11(FIRST_NAME,LAST_NAME, AGE, SEX,
 INCOME)VALUES ('RAHUL','DRAVID',39,'M',84300)");  
conn.commit()  
print ("Records inserted successfully");
 data = conn.execute("select * from EMPLOYEE11");  

for row in data:  
 print ("FIRST_NAME = ", row[0])  
 print ("LAST_NAME = ", row[1])  
 print ("AGE = ", row[2])  
 print ("SEX = ", row[3])
 print ("INCOME = ", row[4])

 conn.execute("UPDATE EMPLOYEE11 SET AGE = AGE + 1 WHERE SEX = '%c'"
 % ('M'))
 conn.commit()
 data = conn.execute("select * from EMPLOYEE11");
 print("Updated table");

 for row in data:  
 print ("FIRST_NAME = ", row[0])  
 print ("LAST_NAME = ", row[1])  
 print ("AGE = ", row[2])  
 print ("SEX = ", row[3])
 print ("INCOME = ", row[4])

 conn.execute("DELETE FROM EMPLOYEE11 WHERE AGE > '%d'" % (40))
 conn.commit()
 data = conn.execute("select * from EMPLOYEE11");
 print("After deletion")

 for row in data:  
 print ("FIRST_NAME = ", row[0])  
 print ("LAST_NAME = ", row[1])  
 print ("AGE = ", row[2])  
 print ("SEX = ", row[3])
 print ("INCOME = ", row[4])
 conn.close() 



17]User defined Exception

class MyCustomException(Exception):
 pass

def example_function(x):
 if x < 0:
 raise MyCustomException("Number should be positive.")
 return x ** 2

try:
 result = example_function(-5)
 print("Result:", result)
except MyCustomException as e:
 print("Custom Exception:", e)


18]
a)Largest among 3
Program to check the largest number among three:
Here's a simple program to find the largest number among three:
python
 
num1 = float(input("Enter first number: "))
num2 = float(input("Enter second number: "))
num3 = float(input("Enter third number: "))

largest = max(num1, num2, num3)
print("The largest number is:", largest)



b)Armstrong number
Program to check if an entered number is an Armstrong number:
Here's how      can check if a number is an Armstrong number or not:
python
 
def is_armstrong(number):
 num_str = str(number)
 num_digits = len(num_str)
 sum_of_digits = sum(int(digit) ** num_digits for digit in num_str)
 return sum_of_digits == number

number = int(input("Enter a number: "))
if is_armstrong(number):
 print(number, "is an Armstrong number.")
else:
 print(number, "is not an Armstrong number.")



19]Print nth fibonacci nos.
Program to print the nth Fibonacci number:
Here's a simple program to find the nth Fibonacci number:
python
 
def fibonacci(n):
 if n <= 0:
 return "Invalid input"
 elif n == 1:
 return 0
 elif n == 2:
 return 1
 else:
 a, b = 0, 1
 for _ in range(n - 2):
 a, b = b, a + b
 return b

n = int(input("Enter the value of n: "))
print("The", n, "th Fibonacci number is:", fibonacci(n))

20]
a)Sum of squares of 1st n natural nos.
Python Program for Sum of squares of first n natural numbers:
Here's how can calculate the sum of squares of the first n natural numbers:
python
 
def sum_of_squares(n):
 return sum(i ** 2 for i in range(1, n + 1))

n = int(input("Enter the value of n: "))
print("Sum of squares of first", n, "natural numbers:", sum_of_squares(n))


b)Cube sum of 1st n natural nos.
Python Program for cube sum of first n natural numbers:
Here's how can calculate the sum of cubes of the first n natural numbers:
python
 
def cube_sum(n):
 return sum(i ** 3 for i in range(1, n + 1))

n = int(input("Enter the value of n: "))
print("Sum of cubes of first", n, "natural numbers:", cube_sum(n))
